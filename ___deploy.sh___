#!/bin/bash

# macOS does not support readlink -f, so we use greadlink instead
if [[ `uname` == 'Darwin' ]]; then
    command -v greadlink 2>/dev/null 2>&1 || { echo >&2 "Install greadlink using brew."; exit 1; }
    readlink='greadlink'
else
    readlink='readlink'
fi

cd $(dirname $($readlink -f $0))

DEPLOYHOST="$1"
SSH="ssh -o ClearAllForwardings=yes -o PermitLocalCommand=no ${DEPLOYHOST}"
DEPLOYPATH="/data/www/vhosts/www.blender.org/blender-id"
VENVPATH="/data/www/vhosts/www.blender.org/venv-bid"

if [ -z "$DEPLOYHOST" ]; then
    echo "Usage: $0 <hostname>" >&2
    exit 1
fi

echo -n "Deploying to ${DEPLOYHOST}... "
if ! ping ${DEPLOYHOST} -q -c 1 -W 2 >/dev/null; then
    echo "host ${DEPLOYHOST} cannot be pinged, refusing to deploy." >&2
    exit 2
fi
echo

if [ $(git rev-parse --abbrev-ref HEAD) != "production" ]; then
    echo "You are NOT on the production branch, refusing to deploy." >&2
    exit 3
fi

if [ -n "$(git log origin/production..production --oneline)" ]; then
    echo "WARNING: not all changes to the production branch have been pushed."
    echo "Press [ENTER] to continue deploying current origin/production, CTRL+C to abort."
    read dummy
fi

./gulp --production

python3 manage.py collectstatic --noinput --verbosity 0  || exit 4
rsync -va static/ $DEPLOYHOST:$DEPLOYPATH/static/ --delete-after || exit 5
rsync -va templates/ $DEPLOYHOST:$DEPLOYPATH/templates/ --delete-after || exit 6

$SSH -TA << EOT
# This creates the Virtualenv inside {project}/.venv
export PIPENV_VENV_IN_PROJECT=1
set -ex

cd $DEPLOYPATH
git reset --hard
git pull origin production
git checkout production

# Just to make sure; this shouldn't do anything.
sed -i~ 's/^DEBUG = .*/DEBUG = False/' blenderid/settings.py

# Create the media directory if it doesn't exist yet.
mkdir -p media

pipenv install --deploy
pipenv run python3 manage.py migrate

sudo service uwsgi reload
EOT
